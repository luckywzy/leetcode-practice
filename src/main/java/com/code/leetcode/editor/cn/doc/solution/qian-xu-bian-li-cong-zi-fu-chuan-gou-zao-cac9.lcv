### 题意解析

先看一下需要被转换的字符串与二叉树的关系：
![0f1b8600bddef7eca47f4dca7eaa2cb.jpg](https://pic.leetcode-cn.com/1641522360-dAjsqZ-0f1b8600bddef7eca47f4dca7eaa2cb.jpg)
通过分析，我们知道某个结点右边的第一对括号，是它的左子树，第二对括号是它的右子树。
而且，字符串的顺序符合**先序遍历**，所以我们用先序遍历来还原二叉树。

### 解题思路

怎么划分字符串从而构建左右子树呢？
- 首先，对于上例字符串`4(2(3)(1))(6(5))`,当遍历到字符串中**非括号字符时**, 这个数字就用来构造根节点。
- 找到其后第一个`(`出现的位置，这里是`1`,并用一个括号统计变量`count`记录**需要右括号的数量**，每当遇到一个左括号，`count++`，遇到一个右括号`count--`，那么当count记录值为`0`时，我们就找到了一个子树。上例中，`count==0`时找到的子树为`(2(3)(1))`，那么它就是`4`的**左子树**构成部分.
- 对于右子树的构建，我们之前记录了左子树的开始位置，那么当`count`再次为0时，此时对应的起点与第一次遇到`(`的位置不同，那么这其后的部分`(6(5))`就作为**右子树**.
- 构建左右子树时，将两端的括号消去。
- 递归完成构建。

### 代码

* java

```java
class Solution {
    public TreeNode str2tree(String s) {
        // 当字符串长度为0时，构造空结点
        if(s.length() == 0) return null;
        // 找到‘(’第一次出现的位置
        int pos = s.indexOf("(");
        // 如果没找到，说明字符串里不再包含子树信息，为叶子节点，用它来直接构并返回
        if(pos == -1){
            return new TreeNode(Integer.parseInt(s));
        }
        // 构建根节点
        int rootVal = Integer.parseInt(s.substring(0, pos));
        TreeNode root = new TreeNode(rootVal);
        // 记录起始位置，从pos开始
        int start = pos;
        // 需要右括号的数量
        int count = 0;
        for(int i = pos; i < s.length(); i++){
            if(s.charAt(i) == '(') count++;
            else if(s.charAt(i) == ')') count--;
            // 当count 为0，且起始位置是从第一个'(' 开始的，那么就去构建左子树
            if(count == 0 && start == pos){
                root.left = str2tree(s.substring(start + 1, i));
                start = i + 1;// 构建完之后更新起始位置
            }else if(count == 0 && start != pos){ // 如果起始位置不是第一次出现'(',就去构建右子树
                root.right = str2tree(s.substring(start + 1, i));
            }
        }
        return root;
    }
}

```

