### 解题思路

重点掌握前两种递归回溯的写法吧，第三种真的不好想到，除非你已经练习的炉火纯青了。

### 代码

* cpp

```cpp
class Solution1 {
public:
    vector<string> generateAbbreviations(string word) {
        unordered_set<string> res;
        backtrack(word, 0, "", true, res);
        return vector<string>(res.begin(), res.end());
    }

private:
    void backtrack(string word, int start, string cur, bool abbreviate, unordered_set<string>& res) {
        if (start >= word.size()) {
            res.insert(cur);
            return;
        }

        for (int i = start; i < word.size(); i++) {
            auto str = word.substr(start, i - start + 1);
            auto abbrev = to_string(i - start + 1);
            if (abbreviate) {
                backtrack(word, i + 1, cur + abbrev, false, res);
                // continue;
            }

            backtrack(word, i + 1, cur + str, true, res);
        }
    }
};

class Solution2 {
public:
    vector<string> generateAbbreviations(string word) {
        vector<string> res;
        backtrack(word, 0, "", 0, res);
        return res;
    }

private:
    void backtrack(string word, int pos, string cur, int cnt, vector<string>& res) {
        if (pos >= word.size()) {
            if (cnt > 0) { // handle last group of abbreviated chars
               cur += to_string(cnt);
            }
            res.push_back(cur);
            return;
        }

        backtrack(word, pos + 1, cur, cnt + 1, res); //  abbreviate current char
        backtrack(word, pos + 1, cur + (cnt > 0 ? to_string(cnt) : "") + word[pos], 0, res); // not abbreviate current char
    }
};

class Solution {
public:
    vector<string> generateAbbreviations(string word) {
        vector<string> res;

        auto powOfLen = pow(2, word.size());
        for (int i = 0; i < powOfLen; i++) {
            string out = "";
            int cntBitOnes = 0;
            for (int j = 0; j < word.size(); j++) {
                if ((i >> j) & 0x1) {
                    cntBitOnes++; // abbreviate
                } else {
                    if (cntBitOnes > 0) { 
                        out += to_string(cntBitOnes);
                        cntBitOnes = 0; // reset cntBitOnes
                    }
                    out += word[j]; // not abbreviate
                }
            }

            if (cntBitOnes > 0) {
                out += to_string(cntBitOnes);
            }
            res.push_back(out);
        }

        return res;
    }
};
```

