## 字典序

我们先巩固一下字典序的概念：

当且仅当以下条件之一成立时，$a$ 在词典上小于 $b$ ：

- 在数组 $a$ 和数组 $b$ 第一个不同的位置 $i$ 上，$a_i < b_i$。

那么我们可以知道，一个序列的**最大字典序就是倒序**；一个序列的**最小字典序就是升序**。

也就是说一个序列如果已经是倒序的话，那么就已经没有比它字典序更大的排列了。有了这个前提我们再往下看。

## 下一个排列

我们要找一个序列的下一个排列，也就是尽可能小的增加当前序列的字典序，那么就是要让增大数字的位置尽可能的靠后。

**那么尽可能靠后是后在什么位置呢？**

有了上面的前提，我们可以想一下，如果该数组的一段后缀，已经是倒序的了，说明对于该后缀已经不能通过改变其元素的位置关系来增大其字典序了，那么我们就只能增大该后缀的前一个元素了，我们设这个位置下标为 $i$。

因为我们要尽可能小的增大字典序，所以我们要尽可能少的增大 $i$ 位置元素，也就是说我们要从倒序的后缀中找到一个比 $i$ 位置元素大的最小元素。

如下例，红色部分就是已经完全倒序了，我们只能增大蓝色位置元素。
$$
14{\color{Blue}5 } {\color{Red}632}
$$
找到一个比 $5$ 大且最小的元素 $6$，将其变成
$$
14{\color{Blue}6 } {\color{Red}532}
$$
这时我们发现红色部分的字典序是可以减小的，我们把它变成升序即可。
$$
14{\color{Blue}6 } {\color{Red}235}
$$
这样就可也保证尽可能小的增大字典序。

## 实现

实现时，我们在找到一个倒序的后缀之后，我们要找一个比 $i$ 位置元素大的最小元素，我们可以遍历一遍去找。

但是仔细思考会发现，一个倒序的后缀数组中找一个值，**倒序？**，这不是就是在一个有序序列中查找吗？是不是可以用**二分查找**。

这里我们可以用c++库函数 $upper\_bound()$，这里简单介绍一下

* cpp

```cpp
iterator upper_bound(iterator first,iterator last,const T&val);
```

该函数会在$[first,last)$ 的区间内二分查找，找到第一个比 $val$ 值大的元素，并返回其指针（或迭代器）。但是要保证该区间的元素是升序的。

* cpp

```cpp
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        for(int i = nums.size() - 2;i >= 0; --i)
            // 找到一个倒序的后缀数组
            if(nums[i + 1] > nums[i]){
                // 反转使后缀数组升序
                reverse(nums.begin() + i + 1,nums.end());
                // 将比nums[i]大的最小元素找到，并与其交换，然后结束函数
                return swap(*upper_bound(nums.begin() + i + 1, nums.end(),nums[i]),nums[i]),void();
            }
        // 没有结束说明整个数组都是倒序的，直接将数组反转
        reverse(nums.begin(),nums.end());
    }
};
```

时间复杂度是 $O(n)$ 的，最坏情况是遍历整个数组。

空间复杂度 $O(1)$。

-----------

最后把注释去掉看看

* cpp

```cpp
class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        for(int i = nums.size() - 2;i >= 0; --i)
            if(nums[i + 1] > nums[i]){
                reverse(nums.begin() + i + 1,nums.end());
                return swap(*upper_bound(nums.begin() + i + 1, nums.end(),nums[i]),nums[i]),void();
            }
        reverse(nums.begin(),nums.end());
    }
};
```

看了一圈题解，除了直接调 $next\_permutation()$ 函数的，这就是最简洁的了。看着太爽了😭

