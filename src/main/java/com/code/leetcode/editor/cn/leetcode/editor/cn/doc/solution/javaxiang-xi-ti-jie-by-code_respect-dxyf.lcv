### 解题思路

相当于一个整数,把高位的数和低位的数进行交换,而且低位的数要比高位的大,并且高位位数尽可能低,所以要从后往前遍历,找到一个数是比前面的数小,并找到第一个低位中比它大的数

### 代码

* java

```java
class Solution {
    public void nextPermutation(int[] nums) {
        int i = nums.length - 2;
        //找要换的高位的数
        while(i >= 0 && nums[i] >= nums[i + 1]){
            i--;
        }
        if(i >= 0){
            int j = nums.length - 1;
        //找低位的数
            while(j >= 0 && nums[i] >= nums[j]){
                j--;
            }
            swap(nums,i,j);
        }
        ///如果没有,就反转数组
        reverse(nums,i + 1);
    }

    public void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }

    public void reverse(int[] nums, int start) {
        int left = start, right = nums.length - 1;
        while (left < right) {
            swap(nums, left, right);
            left++;
            right--;
        }
    }
}

```

