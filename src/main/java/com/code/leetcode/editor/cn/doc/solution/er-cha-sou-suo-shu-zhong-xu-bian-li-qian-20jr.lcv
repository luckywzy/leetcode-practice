# 一顿分析

根据题意，要求重新对应前驱后继关系的链表，那么自然想到的就是二叉搜索树的中序遍历操作。

那么我们就在中序遍历的过程中做文章

1. 定义一个全局变量`preNode`，当前节点遍历结束的时候，把这个`preNode`指向到当前节点，这样到下一个节点的时候`preNode`指向的自然就是中序遍历的前一个节点，也就是当前节点的**前驱节点**
2. 遍历到当前节点的时候，将`preNode`的`right`指向到当前节点，将当前节点的`left`指向到`preNode`，这样就算是完成了链表的基本链接操作
3. 额外定义一个`tmpNode`，将他的`right`指向到我们在中序遍历过程中遇到的第一个节点，这样`head`那边的指针关系也关联上了
4. 剩下最后的节点到指向到第一个节点的操作。在我们完成了上面所有操作之后`preNode`自然就是中序遍历的最后一个节点了，而`tmpNode`的`right`又指向了第一个节点，所以我们再在这时候将两者关联起来
5. 结束收工

# 代码

* java

```java
class Solution {

    Node tmpNode = new Node();
    Node preNode;

    public Node treeToDoublyList(Node root) {
        if (null == root){
            return null;
        }
        dfs(root);
        preNode.right = tmpNode.right;
        tmpNode.right.left = preNode;
        return tmpNode.right;
    }

    public void dfs(Node node){
        if (null == node){
            return;
        }
        dfs(node.left);
        if (tmpNode.right == null){
            //把虚拟头结点连接到最小节点
            tmpNode.right = node;
        }
        if (preNode != null){
            //连起来
            preNode.right = node;
            node.left = preNode;
        }
        preNode = node;
        dfs(node.right);
    }

}
```

