> Problem: [80. 删除有序数组中的重复项 II](https://leetcode.cn/problems/remove-duplicates-from-sorted-array-ii/description/)

[TOC]

# 思路

> 这个问题可以使用双指针技巧来解决。双指针技巧在解决数组相关问题时经常使用，其核心思想是维护两个指针，一个指针用于遍历数组，另一个指针用于记录有效元素的位置。

# 解题方法

> 首先，我们需要处理特殊情况，即数组长度小于等于 2 的情况，因为在这种情况下无论如何元素都不会重复超过两次，所以可以直接返回数组长度。

> 然后，我们初始化一个指针 index，从数组的第三个元素开始。这是因为数组的前两个元素允许重复两次。

> 接下来，我们从数组的第三个元素开始遍历，遍历过程中比较当前元素与 index-2 位置的元素是否相同。如果不相同，则说明当前元素是新的有效元素，可以放置到 index 位置，然后 index 自增，指向下一个有效位置。

> 遍历完成后，返回 index，即为修改后数组的新长度。

# 复杂度

时间复杂度:

> $O(n)$。
> 遍历数组一次，因此时间复杂度为 O(n)，其中 n 是数组的长度。

空间复杂度:

> $O(1)$。由于只使用了常数个额外变量（即 index），因此空间复杂度为 O(1)。不需要额外的数组空间。

# Code

* []

```C++
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        if (n <= 2) return n; // 如果数组长度小于等于2，则无需处理，直接返回数组长度
        
        int index = 2; // 从第三个元素开始，因为前两个元素允许重复
        for (int i = 2; i < n; ++i) {
            // 只有当当前元素不等于 index-2 位置的元素时才进行覆盖
            if (nums[i] != nums[index - 2]) {
                nums[index++] = nums[i];
            }
        }
        return index; // 返回有效元素的个数
    }
};
```

