今天是七夕，我对象说陪我一天，象说没时间，动物园不放假。

#### 思路

一个递增子序列 path 怎么产生？它的元素是从 nums 中一个个选的。
比如 `[4,2,7,7]`，path 选第一个数，有 4 种选择：从`nums[0]`到`nums[3]`。
选了`nums[i]`之后，会在`nums[i+1]`到末尾的数中，再选下一个……
以此类推，直到没得选为止。当 path 满足要求，就可以加入解集，这是递归回溯的思路。

定义递归函数：在从下标 start 到末尾的子数组中选合适的数推入 path。path 也作为参数。在递归过程中，不断选数字入 path。

递归函数中，通过 for 循环枚举出当前的所有选择——（展开不同的递归分支）。

选择了一个数，推入 path，往下继续选择（继续递归）。

当 start 指针到达边界，能选的都选了，没有数字可选了，结束递归。

基于当前选择的递归，已经考察了所有可能，这时会回溯，path 要撤销最末尾的数字，切入别的分支。

我们画出递归树看看：

![image.png](https://pic.leetcode-cn.com/1598311048-oRbzUq-image.png)

我们用一个 set 存储每个合格的 path，下次遇到重复的，不让它加入解集即可。

#### 代码 一

* js

```js
const findSubsequences = (nums) => {
  const res = [];
  const len = nums.length;
  const set = new Set();
  
  const dfs = (start, path) => {
    if (path.length >= 2) {
      const str = path.toString(); // path数组 转成字符串
      if (!set.has(str)) {         // set中没有存有当前path
        res.push(path.slice());    // 推入一份path的拷贝
        set.add(str);              // 存入set，记录一下
      }
    }
    for (let i = start; i < len; i++) {      // 枚举出当前所有的选项，从start到末尾
      const prev = path[path.length - 1];    // 上一个选择，即path数组的末尾元素
      const cur = nums[i];                   // 当前选择
      if (path.length == 0 || prev <= cur) { // 如果path为空，或满足递增关系，则可选择
        path.push(cur);                      // 选择当前的数字
        dfs(i + 1, path);                    // 继续往下递归，注意传的是i+1
        path.pop();                          // 撤销选择当前数字，选择别的数字
      }
    }
  };
  dfs(0, []); //递归的入口，从下标0到末尾的数组中选择合适的数加入path，组成解集。初始path是空数组
  return res;
};
```

#### 方法二：不用额外空间的去重

不用 set 去重可以吗？可以的。
如下图，蓝色阴影的点 7 遍历完，往下递归，指针越界，到了递归的出口，将 [4,7,7] 推入 res 数组，并return，回溯到黄色阴影的 7 这个点，我希望这个点的 [4,7] 不推入 res 数组，它在 for 循环中有下一次迭代的，我将它 break，这样指针就不会越界，不会走到递归出口，它的 [4,7] 就不会进入 res 。break 之后，再回溯到点 4，然后又选择了右边的 7，当前选择是 7 ，上一个选择是 4，两者不相同，不 break，这个分支中的 [4,7] 会被推入 res 数组。

（要不直接看下面代码吧，讲不清啊，图也很难画出来）

![image.png](https://pic.leetcode-cn.com/1598336752-UjCTGe-image.png)

#### 代码二

运行: 160 ms, 击败 100.00% JavaScript

* js

```js
const findSubsequences = (nums) => {
  const res = [];
  const len = nums.length;

  const dfs = (start, path) => {
    if (start == len) {    // 递归的出口，指针已经越界
      if (path.length >= 2) {   // path长度大于等于2
        res.push(path.slice()); // 加入解集
        return;
      }
    }
    path.push(nums[start]);         // 进行选择
    for (let i = start + 1; i <= len; i++) { //枚举出选项，从start+1到len都可以选
      const prev = nums[start];     // 递归树中上一层的选择
      const cur = nums[i];          // 当前的选择
      if (i < len && cur == prev) { // i还没越界，且当前选择和上一层的选择相同
        dfs(i, path);               // 递归完当前选择，就break，避免i自增，导致i==len
        break;                      // 从而避免导致执行else if里的逻辑，导致start==len
                                    // 导致来递归的出口，path推入res
      } else if (i == len || prev < cur) { // i==len越界，让它落入递归，在递归的出口中return
        dfs(i, path);                      // 或prev < cur，满足条件，往下递归
      }
    }
    path.pop();                     // 撤销选择
  };
  for (let i = 0; i < len; i++) {
    dfs(i, []);
  }
  return res;
};
```

这道题挺难的，考察了回溯，迭代和递归糅合在一起，容易迷糊，最好画出递归树看看，第一种常规一定要掌握，第二种理解上有点绕，可能还有更好的实现代码，大家可以帮忙想想。

#### 如果有帮助，点个赞鼓励笨猪爆破组继续写下去吧。如果哪里不对不够好，指出我我修正。

